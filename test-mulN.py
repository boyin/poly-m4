import sys

def test_mulN (N, QQ) :
    if (SHOW_MOD == 1) : S = "_mod_%d" % QQ
    else : S = ""
    print '// Generated by python test-mulN.py %d %d' % (N, QQ)
    print '''
#include <stdio.h>
#include <stdlib.h>
#include "cpucycles.h"

#define WARMCACHE 30
#define NUMTESTS  100'''
    print "#define QQ %d" % (QQ)
    print'''
//#include "polymul_NxN.h"

//extern unsigned long cpucycles(void);
//extern void init_perfcounters (int do_reset, int enable_divider);
void qsort(void *base, size_t nitems, size_t size, int (*compar)(const void *, const void*));
int cmpfunc (const void * a, const void * b) {
   return ( *(int*)a - *(int*)b );
}'''
    if (MONT_OR_BAR == 1) :
        print "extern void gf_polymul_%dx%d%s(int *h, int *f, int *g);" %(N,N,S)
    else :
        print "extern void gf_polymul_%dx%d%s_divR(int *h, int *f, int *g);" %(N,N,S)
    print '''int times[NUMTESTS+WARMCACHE];

void print16n (short *b, int n) {
  int i;
  printf("(%-5d) + (%-5d) * x",b[0],b[1]);
  for (i=2; i<16*n; i++) {
    if ((i&7)==0) printf ("\\n ");
    printf ("+(%-5d)*x^%d",b[i],i);
  }
  printf("\\n");
}

void rand16n (short *b, int n) {
  int i;
  
  for (i=0; i<16*n; i++) b[i] = rand() % QQ - (QQ >> 1);
}

int main (void) {
  int i, delta;'''
    print "  int ff[%d], gg[%d], hh[%d];" % (N/2,N/2,N)
    print '''  short * f=(short *)ff; short * g=(short *)gg;
  unsigned long cycles, time1, time2;
  int c,j;
  
  init_perfcounters(1,0);  
  cycles = 0;
  for (i=0; i< NUMTESTS + WARMCACHE ; i++) { 

    do {'''
    print "      rand16n(f,%d);" % (N/16)
    print "    } while (f[0]==0);"
    print "    rand16n(g,%d);" % (N/16)
    print
    print '#if _NO_DEBUG_ != 1'
    print '    printf("f=GF%dx(");' % (QQ)
    print "    print16n(f,%d);" % (N/16)
    print '    printf(")\\ng=GF%dx(");' % (QQ)
    print '    print16n(g,%d);' % (N/16)
    print '    printf(")\\n");'
    print '#endif'
    print 
    print '    time1  = cpucycles();'
    if (MONT_OR_BAR == 1) :
        print '    gf_polymul_%dx%d%s(hh,ff,gg);' % (N,N,S)
    else :
        print '    gf_polymul_%dx%d%s_divR(hh,ff,gg);' % (N,N,S)
    print '    time2  = cpucycles();    '
    print
    print '#if _NO_DEBUG_ != 1'
    print '    printf("h=GF%dx(");' % (QQ)
    print '    print16n((short *)hh,%d);' % (N/8)
    print '    printf(")\\n");'
    print '#endif'
    print '''

    times[i] = time2-time1;
    if (i>= WARMCACHE) {
      cycles += (time2 - time1);
    }
  }
  for (i=0; i<WARMCACHE+NUMTESTS; i++) printf("%d ",times[i]);
  printf("%d cycles ",(cycles)/NUMTESTS);
  qsort(times+WARMCACHE, NUMTESTS, sizeof(int), cmpfunc);
  printf("%d cycles median\\n",times[WARMCACHE+NUMTESTS/2]);
  //printf("fails %d\\n",fail);
  return(0);
}'''

SHOW_MOD = 0    
MONT_OR_BAR = 0
try : NN = int(sys.argv[1])
except : NN = 256
try : QQ = int(sys.argv[2])
except: QQ = 4591 # test new base case
if ("BARRETT" in sys.argv) : MONT_OR_BAR = 1
if ("MOD" in sys.argv) : SHOW_MOD = 1
test_mulN (NN, QQ) 
